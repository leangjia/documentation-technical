# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# 
# Translators:
# Jeffery Chenn <jeffery9@gmail.com>, 2015
# Jeffery Chenn <jeffery9@gmail.com>, 2015-2016
msgid ""
msgstr ""
"Project-Id-Version: odoo documentation technical\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-30 19:35+0800\n"
"PO-Revision-Date: 2016-06-11 11:41+0000\n"
"Last-Translator: Jeffery Chenn <jeffery9@gmail.com>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/odoo-cn/odoo-documentation-technical/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../git.rst:5
msgid "Bazaar to git"
msgstr "从Bazaar到git"

#: ../../git.rst:8
msgid "Initializing a working copy"
msgstr "初始化工作副本"

#: ../../git.rst:10
msgid "Use the easy-setup shell script::"
msgstr "使用easy-setup shell脚本 ::"

#: ../../git.rst:14
msgid "it will will ask a few questions and create a local copy."
msgstr "它会问几个问题, 并创建一个本地副本。"

#: ../../git.rst:17
msgid "Git concepts"
msgstr "Git 概念"

#: ../../git.rst:20
msgid "Remotes"
msgstr "远程"

#: ../../git.rst:22
msgid ""
"Remotes are \"remote repositories\" which can be fetched from and pushed to."
" Remotes can be listed with ``git remote``\\ [#remote-default]_ and a local "
"repository can have any number of remotes. The setup script creates 2 "
"remotes:"
msgstr "Remotes are ``remote repositories`` which can be fetched from and pushed to. Remotes can be listed with ``git remote`` \\ [#remote-default]_ and a local repository can have any number of remotes. The setup script creates 2 remotes :"

#: ../../git.rst:28
msgid "``odoo``"
msgstr "``odoo``"

#: ../../git.rst:27
msgid ""
"the official repository and main branches, roughly corresponds to the old "
"\"mainline\" branches in bazaar. You should never need to push to it, and by"
" default your local copy is configured to forbid it."
msgstr "the official repository and main branches, roughly corresponds to the old ``mainline`` branches in bazaar. You should never need to push to it, and by default your local copy is configured to forbid it."

#: ../../git.rst:32
msgid "``odoo-dev``"
msgstr " ``odoo-dev`` "

#: ../../git.rst:31
msgid ""
"a grab-bag of development branches, you can push your work to it so other "
"coworkers can work with you."
msgstr "一个抓斗袋开发分支, 你可以把你的工作, 它让其他同事能与您合作。"

#: ../../git.rst:35
msgid "Branches"
msgstr "分支"

#: ../../git.rst:37
msgid ""
"The working copy and each remote contain multiple branches. Local branches "
"can be listed by ``git branch``, remote branches can be listed with ``git "
"branch -r``. Both types can be listed with ``git branch -a``."
msgstr "工作副本, 每个远程包含多个分支机构。当地分行可以列出 ``git branch`` , 远程分支机构可以列出 ``的Git分支-r`` 。这两种类型可以列出 ``的Git分支-a`` 。"

#: ../../git.rst:41
msgid ""
"Work is only possible on local branches, even though it's possible to check "
"out a remote branch work on it will be lost."
msgstr "工作只能在当地的分支机构, 即使它可以检查出远程分支工作将丢失。"

#: ../../git.rst:45
msgid "Staging"
msgstr "暂存"

#: ../../git.rst:47
msgid ""
"``bzr commit`` takes all alterations to the working copy and creates a "
"commit from them. Git has an intermediate step called \"staging\". ``git "
"commit`` will create a commit from what has been staged, not from the "
"working copy\\ [#commit-no-staging]_. Staging is done with ``git add``. A "
"commit with nothing staged is a null operation."
msgstr " `` bzr commit `` takes all alterations to the working copy and creates a commit from them. Git has an intermediate step called ``staging``. `` git commit `` will create a commit from what has been staged， not from the working copy\\ [#commit-no-staging]_. Staging is done with `` git add `` . A commit with nothing staged is a null operation."

#: ../../git.rst:55
msgid ""
"It's possible for a single file to have changes in both the index and "
"working copy: if a file is altered, staged and altered again, the second set"
" of change has to be staged separately"
msgstr "有可能为单个文件, 以有变化都在索引和工作副本:如果一个文件被改变, 演出和再次改变, 第二组的变化必须单独上演"

#: ../../git.rst:60
msgid "SHA1"
msgstr "SHA1"

#: ../../git.rst:62
msgid ""
"Git has no sequential identifier, each commit is uniquely identified by a "
"SHA (40 hexadecimal characters) roughly corresponding to a bazaar revision-"
"id. Providing the full sha is rarely necessary, any unique leading substring"
" is sufficient, e.g. ``dae86e`` will probably stand in for "
"``dae86e1950b1277e545cee180551750029cfe735``."
msgstr "Git有没有顺序的标识符, 每次提交用一个独特的SHA（40位字符）确定大致相当于一个集市修订-ID。提供了完整的SHA很少需要, 任何独特的领先的子串就足够了, 如 ``dae86e`` 可能会站在为 ``dae86e1950b1277e545cee180551750029cfe735`` 。"

#: ../../git.rst:69
msgid "Basic development workflow"
msgstr "基本开发工作流"

#: ../../git.rst:71
msgid "update your remotes with ``git fetch --all``"
msgstr "使用 ``git fetch --all`` 从远程更新"

#: ../../git.rst:72
msgid ""
"create your development branch with ``git checkout -b <branch_name> "
"<source_branch>``. For instance if you wanted to add support for full-text "
"search in master you could use ``git checkout -b master-fts-xxx "
"odoo/master``"
msgstr "使用 ``git checkout -b <branch_name> <source_branch>`` 创建开发分支。例如, 如果你想在主干添加支持全文搜索, 你可以使用 ``git checkout -b master-fts-xxx odoo/master`` "

#: ../../git.rst:75
msgid ""
"do your changes, stage them with ``git add`` and commit them with ``git "
"commit``"
msgstr "做你的变化, ``git add`` 阶段他们并承诺他们 ``git commit`` "

#: ../../git.rst:77
msgid "if your branch is long-lived, you may want to update it to its parent"
msgstr "如果你的分支是长期存在的, 你可能想将其更新到它的父"

#: ../../git.rst:79
msgid "update the remotes with ``git fetch --all``"
msgstr "使用 ``git fetch --all`` 从远程更新"

#: ../../git.rst:80
msgid ""
"merge the remote branch into the local one with ``git merge --no-ff "
"odoo/master``"
msgstr "合并远程分支到本地之一, ``的Git合并--no-FF odoo / master`` "

#: ../../git.rst:83
msgid ""
"to push the branch to the development repository, use ``git push -u dev "
"<branchname>``, this will automatically create a branch called "
"``<branchname>`` on dev. Next time around you do not have to use ``-u``"
msgstr "to push the branch to the development repository, use ``git push -u dev <branchname>`` , this will automatically create a branch called ``<branchname>`` on dev. Next time around you do not have to use ``-u`` "

#: ../../git.rst:86
msgid "once the feature is done, create a pull request"
msgstr "一旦该特性完成后, 创建一个拉请求"

#: ../../git.rst:105
msgid "Tasks"
msgstr "任务"

#: ../../git.rst:108
msgid "Converting your feature branches from bazaar"
msgstr "从bazaar转换特性分支"

#: ../../git.rst:110
msgid "`The readme`_ has some instructions."
msgstr " `The readme` _ 有些指令."

#: ../../git.rst:113
msgid "Viewing history: ``git log``"
msgstr "查看历史:``git log`` "

#: ../../git.rst:115
msgid ""
"``git log`` fulfills the same role as ``bzr log`` and is fairly similar, "
"with a few differences:"
msgstr " ``git log`` 满足作为 ``BZR log`` 相同的角色, 是相当类似的, 有一些不同之处:"

#: ../../git.rst:118
msgid ""
"``git log`` has no ``-r`` argument, its first argument (optional) is a "
"revision spec"
msgstr " ``git log`` 没有 ``-r`` 的说法, 它的第一个参数（可选）是一个修订规范"

#: ../../git.rst:120
msgid ""
"``git log`` always operates on ranges, if a single commit is provided (via "
"hash, tag, branch or other) it will list the specified commit *and all of "
"its ancestors*. To see a single commit, use ``git show``."
msgstr " ``git log`` 始终工作在范围内, 如果一个提交设置（通过哈希, 标签, 分公司或其他）, 它会列出指定提交 *和它的所有祖先* 。要查看单个提交, 使用 ``git show`` 。"

#: ../../git.rst:123
msgid ""
"``git log``'s second positional argument is a path (file or directory). "
"Because both are optional, if both a revision and a file match the revision "
"will be selected. It is recommended to use ``--`` before a file path::"
msgstr " ``git log`` 的第二个位置参数是一个路径（文件或目录）。因为两者都是可选的, 如果两个修订和一个文件相匹配的修改将被选择。建议使用 ``--`` 文件路径之前 ::"

#: ../../git.rst:130
msgid ""
"``git log`` will actually work if given a directory, instead of pegging the "
"CPU forever"
msgstr " `如果给一个目录'git log ``将实际工作, 而不是永远挂在CPU,"

#: ../../git.rst:132
msgid ""
"``git log`` works with removed files or directories without having to "
"provide a revision during which the file or directory still existed"
msgstr " ``git log`` 与删除的文件或目录的工作, 而无需提供一个版本中的文件或者目录仍存在"

#: ../../git.rst:134
msgid ""
"``git log`` has *lots* of options to customize the output, e.g. ``-p`` will "
"display the changes to each file\\ [#log-patch-empty]_, ``--name-status`` "
"will list the changed files and how they changed SVN-style (with a ``M`` or "
"``D`` prefix), ``--name-only`` will just list the changed files, ``--stat`` "
"generates a diffstat view, ``--grep`` filters by grepping on the commit "
"message, …"
msgstr " ``git log`` 有 *很多* 的选项自定义输出, 如 ``-p`` 会显示更改为每个文件\\ [＃日志贴片空] _ ``--name状态`` 会列出修改过的文件, 以及他们如何改变SVN式（带 ``M`` 或 ``D`` 前缀）, ``--name-only`` 将只列出修改过的文件, ``- -stat`` 产生diffstat来看, ``--grep`` 过滤器由grepping在提交信息, ..."

#: ../../git.rst:142
msgid "Reverting uncommitted changes"
msgstr "撤销未提交的更改"

#: ../../git.rst:144
msgid ""
"Do *not* use ``git revert``, it does something completely different than "
"``bzr revert``"
msgstr "*不* 使用 ``git revert`` , 但它的东西比 ``BZR revert`` 完全不同"

#: ../../git.rst:147
msgid ""
"If you have altered files which you want to revert, use ``git checkout -- "
"<path>``. To revert every file in the directory, use ``git checkout -- .``"
msgstr "If you have altered files which you want to revert, use ``git checkout -- <path>`` . To revert every file in the directory, use ``git checkout -- .`` "

#: ../../git.rst:149
msgid ""
"If you have staged a file and you want to unstage it, use ``git reset HEAD "
"<file>``. This will not revert the file's changes, the file will be marked "
"as modified again"
msgstr "If you have staged a file and you want to unstage it, use ``git reset HEAD <file>`` . This will not revert the file's changes, the file will be marked as modified again"

#: ../../git.rst:154
msgid "Diffing: ``git diff``"
msgstr "比较 :``git diff`` "

#: ../../git.rst:156
msgid ""
"``git diff`` is fairly similar to ``bzr diff``: it compares the working copy"
" with stored content and can be restricted to a given file path. However:"
msgstr " ``的git diff`` 是相当类似于 ``BZR diff`` :将比较该工作副本存储的内容, 并且可以被限制在一个给定的文件的路径。但是:"

#: ../../git.rst:159
msgid ""
"``git diff`` compares the working copy and the staging area, not the latest "
"commit"
msgstr " ``git diff`` 比较工作副本和临时区域, 而不是最新的承诺"

#: ../../git.rst:161
msgid "``git diff --staged`` compares the staging area and the latest commit"
msgstr " ``git diff --staged`` 比较临时区域和最新提交"

#: ../../git.rst:162
msgid ""
"``git diff HEAD`` ignores the staging area and compares the working copy "
"with the latest commit. More generally ``git diff <commit>`` will diff the "
"working copy and the specified commit"
msgstr " ``git diff HEAD`` ignores the staging area and compares the working copy with the latest commit. More generally ``git diff <commit>`` will diff the working copy and the specified commit"

#: ../../git.rst:165
msgid ""
"to diff between commits, simply pass the commit identifiers (no ``-r`` "
"argument)"
msgstr "要提交的差异, 简单地传递提交标识符（没有 ``-r`` 参数）"

#: ../../git.rst:167
msgid ""
"``git diff --stat`` provides a diffstat-view of the diff, and can be "
"combined with other flags. It can be used as an intermediate between ``git "
"status`` and ``git status -s``"
msgstr " ``git diff --stat`` 提供diffstat视图把差异, 并且可以与其它标志组合。它可以作为一个中间的 ``git status`` 和 ``git的状态-s`` "

#: ../../git.rst:172
msgid "Update to a previous revision"
msgstr "更新到以前版本"

#: ../../git.rst:174
msgid ""
"``git checkout`` takes an arbitrary commit, the equivalent to ``bzr update "
"-r<rev>`` is thus ``git checkout <rev>``."
msgstr " ``git checkout`` takes an arbitrary commit, the equivalent to ``bzr update -r<rev>`` is thus ``git checkout <rev>`` ."

#: ../../git.rst:178
msgid "File from the past"
msgstr "从过去的文件"

#: ../../git.rst:180
msgid ""
"``bzr cat -r<revision> <filename>`` shows the file ``<filename>`` as it was "
"at ``<revision>``. The Git equivalent is ``git show <revision>:<filename>``"
msgstr " ``bzr cat -r<revision> <filename>`` shows the file ``<filename>`` as it was at ``<revision>`` . The Git equivalent is ``git show <revision> :<filename>`` "

#: ../../git.rst:184
msgid "Incorrect last commit: fix it"
msgstr "不正确的最近提交:修复它"

#: ../../git.rst:186
msgid ""
"If the last commit has to be fixed a bit (error, missing data, "
"incomplete/incorrect commit message) it can be fixed with ``git commit "
"--amend``. Instead of creating a new commit, it adds whatever is being "
"committed to the previous commit."
msgstr "如果最后提交已经被固定了一下（错误, 数据缺失, 不完整/不正确提交信息）, 可以固定 ``git的承诺--amend`` 。而不是创建新提交的, 它增加了无论是被提交到上一次提交。"

#: ../../git.rst:192
msgid "Incorrect last commit: remove it"
msgstr "不正确最后提交:删除它"

#: ../../git.rst:194
msgid ""
"If the last commit has to be removed entirely (similar to ``bzr uncommit``),"
" use ``git reset HEAD~1``."
msgstr "如果最后提交已被完全删除（类似于 ``BZR uncommit`` ）, 使用 ``git的复位HEAD~1`` 。"

#: ../../git.rst:197
msgid ""
"do not use this command or the previous one on commits you have already "
"pushed"
msgstr "不要使用此命令或前一个在提交你已经推"

#: ../../git.rst:201
msgid "Useful tips"
msgstr "实用技巧"

#: ../../git.rst:204
msgid "Partial operations"
msgstr "部分操作"

#: ../../git.rst:206
msgid ""
"``checkout``, ``add``, ``commit``, ``reset`` and ``stash`` can take a ``-p``"
" flag, which allows operating (staging, reverting, ...) on a subset of the "
"file. It opens a UI allowing the selection (or not) of each patch hunk, and "
"even the splitting of hunk if they're too big."
msgstr " ``checkout`` , ``add`` , ``commit`` , ``reset`` 和 ``stash`` 可以了 ``-p`` 标志, 这使得操作（升级, 恢复, ..上的文件的子集。）。它会打开一个用户界面, 允许每个补丁大块的选择（或没有）, 和大块的, 甚至分裂, 如果他们是太大了。"

#: ../../git.rst:211
msgid ""
"Allows reverting only part of the changes to a file, or cleanly splitting "
"refactorings and fixes mixed in a file."
msgstr "允许恢复混合在一个文件中对文件的更改, 或干净拆分重构和修复的一部分。"

#: ../../git.rst:215
msgid "short status"
msgstr "短状态"

#: ../../git.rst:217
msgid ""
"The default ``status`` command is very verbose (though useful, it provides "
"instructions for reverting things). The ``-s`` flag provides an SVN-like "
"display instead with just a listing of files and :abbr:`A (Added)`, :abbr:`M"
" (Modified)` or :abbr:`D (Deleted)` flags next to them. Each file can have 2"
" flags, the first is for the index (difference between the last commit and "
"the index) and the and the second is for the working copy (difference "
"between the index and the working copy)."
msgstr "默认 ``status`` 命令是非常详细的（虽然有用, 它提供了有关恢复的东西）。该 ``-s`` 旗提供了一个SVN一样的显示, 而不是与文件刚一上市和 :abbr:`A（新增）` :abbr:`M（修改）` 或 :abbr:`D（删除）` 标志旁边。每个文件可以有2个标志, 第一个是和第二（上次提交与指数之差）的指数是（索引和工作副本之间的差异）的工作拷贝。"

#: ../../git.rst:226
msgid "``checkout`` shortcut"
msgstr " ``checkout`` 快捷方式"

#: ../../git.rst:228
msgid ""
"``checkout -`` will behave like ``cd -``, it will switch to the previously "
"checked-out branch/commit"
msgstr " ``checkout -`` will behave like ``cd -`` , it will switch to the previously checked-out branch/commit"

#: ../../git.rst:231
msgid ""
"by default, ``git remote`` will only give the names of the various remotes. "
"``git remote -v`` will give the name and URL of each remote."
msgstr "默认情况下, ``GIT中remote`` 只会给各种遥控器的名称。 ``git的远程-v`` 会给每个远程的名称和网址。"

#: ../../git.rst:235
msgid "the ``-a`` option will automatically stage modified and deleted files"
msgstr "在 ``-a`` 选项将自动暂存, 修改和删除文件"

#: ../../git.rst:238
msgid ""
"but only the changes performed by this actual commit, for a merge the merged"
" changes are not considered part of the merge commit"
msgstr "但只有改变的合并提交的这个实际的承诺, 对于合并的合并的更改不被视为一部分进行"
